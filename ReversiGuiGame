
/**
 * ReversiGui: 
 * 
 * @author Iain Martin 
 * @version 1.0
 * 
 * Notes to use ReversiGui
 *  ReversiGui is intended as a replacement for a Menu class for Reversi.
 *  Comments that start with ReversiGUI mark where you might 
 *  add your own code. Please do not attempt to use this GUI until
 *  you have already met the minimum requirements of the project.
 * 
 * Notes:
 *  Event handlers have been set up for Menu Options
 *  NewGame, LoadGame and Save Game.
 *  
 *  An Event handler has also been set up for a Mouse Click on
 *  the grid which calls clickSquare(row, col).
 *  
 *  To add functionality to this GUI add you code to these functions
 *  which are at the end of this file. 
 *  
 *  Potential additions: FileChoosers could be implemented and the grid characters
 *  could be replaced with graphics by loading gifs or jpgs into the grid which is
 *  created from JButtons.
 *  
 *  Updated version
 *  
 *  @author Josh Ng
 *  @version 2.3
 */

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.io.*;

public class ReversiGui implements ActionListener 
{
    // Default filename to use for saving and loading files
    // Possible improvement: replace with a FileChooser
    // Declaring Global variables.
    private final static String DEFAULT_FILENAME = "Reversigui.txt";
    private int GRID_SIZE = 8;
    private int[][] board = new int[8][8];
    private JButton [] buttonArray; 
    private int player;
    private int opposite;

    public JMenuBar createMenu() 
    {
        JMenuBar menuBar  = new JMenuBar();;
        JMenu menu = new JMenu("Reversi Menu");
        JMenuItem menuItem;

        menuBar.add(menu);

        // A group of JMenuItems. You can create other menu items here if desired
        menuItem = new JMenuItem("New Game");
        menuItem.addActionListener(this);
        menu.add(menuItem);

        menuItem = new JMenuItem("Load Game");
        menuItem.addActionListener(this);
        menu.add(menuItem);

        menuItem = new JMenuItem("Save Game");
        menuItem.addActionListener(this);
        menu.add(menuItem);

        //a submenu
        menu.addSeparator();
        return menuBar;
    }

    public Container createContentPane() 
    {
        int numButtons = GRID_SIZE * GRID_SIZE;
        JPanel grid = new JPanel(new GridLayout(GRID_SIZE,GRID_SIZE));
        buttonArray = new JButton[numButtons];

        for (int i=0; i<numButtons; i++)
        {
            buttonArray[i] = new JButton(" ");

            // This label is used to identify which button was clicked in the action listener
            buttonArray[i].setActionCommand("" + i); // String "0", "1" etc.
            buttonArray[i].addActionListener(this);
            grid.add(buttonArray[i]);
        }
        return grid;
    }

    /**
     * This method handles events from the Menu and the board.
     *
     */
    public void actionPerformed(ActionEvent e) 
    {
        String classname = getClassName(e.getSource());
        JComponent component = (JComponent)(e.getSource());

        if (classname.equals("JMenuItem"))
        {
            JMenuItem menusource = (JMenuItem)(e.getSource());
            String menutext  = menusource.getText();

            // Determine which menu option was chosen
            if (menutext.equals("Load Game"))
            {
                /* ReversiGUI    Add your code here to handle Load Game **********/

                LoadGame();
            }
            else if (menutext.equals("Save Game"))
            {
                /* ReversiGUI    Add your code here to handle Save Game **********/
                SaveGame();
            }
            else if (menutext.equals("New Game"))
            {
                /* ReversiGUI    Add your code here to handle Save Game **********/
                NewGame();
            }
        }
        // Handle the event from the user clicking on a command button
        else if (classname.equals("JButton"))
        {
            JButton button = (JButton)(e.getSource());
            int bnum = Integer.parseInt(button.getActionCommand());
            int row = bnum / GRID_SIZE;
            int col = bnum % GRID_SIZE;

            /* ReversiGUI    Add your code here to handle user clicking on the grid ***********/
            clickSquare(row, col);
        }  
    }

    /**
     *  Returns the class name
     */
    protected String getClassName(Object o) 
    {
        String classString = o.getClass().getName();
        int dotIndex = classString.lastIndexOf(".");
        return classString.substring(dotIndex+1);
    }

    /**
     * Create the GUI and show it.
     * For thread safety, this method should be invoked from the event-dispatching thread.
     */
    private static void createAndShowGUI() 
    {
        // Create and set up the window.
        JFrame frame = new JFrame("ReversiGui");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // Create and set up the content pane.
        ReversiGui Reversigui = new ReversiGui();
        frame.setJMenuBar(Reversigui.createMenu());
        frame.setContentPane(Reversigui.createContentPane());

        // Display the window, setting the size
        frame.setSize(400, 400);
        frame.setVisible(true);
    }

    /**
     * Sets a Gui grid square at row, col to display a character
     */
    public boolean setGuiSquare(int row, int col, char c)
    {
        int bnum = row * GRID_SIZE + col;
        if (bnum >= (GRID_SIZE*GRID_SIZE))
        {
            return false;
        }
        else
        {
            buttonArray[bnum].setText(Character.toString(c));
        }
        return true;
    }

    /**
     * This is a standard main function for a Java GUI
     */
    public static void main(String[] args) 
    {
        //Schedule a job for the event-dispatching thread:
        //creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater(new Runnable() 
            {
                public void run() 
                {
                    createAndShowGUI();
                }
            });
    }

    //************************************************************************
    //*** ReversiGUI: Modify the methods below to respond to Menu and Mouse click events

    /**
     * This method is called from the Menu event: New Game.
     * ReversiGUI
     */
    public void NewGame()
    {

        // Set the initial board position
        for(int i = 0; i<board.length; i++){
            for(int j = 0; j<board[i].length; j++){
                board[i][j] = 0;
            }
        }
        player = 1;
        opposite = 2;
        board[3][3] = 1;
        board[4][4] = 1;
        board[3][4] = 2;
        board[4][3] = 2;
        updateBoard();
    }

    /**
     * This method is called from the Menu event: Load Game.
     * ReversiGUI
     */
    public void LoadGame()
    {
        //Declares Variables.
        String fileName;
        FileReader fileReader = null;
        BufferedReader bufferedReader = null;
        String nextLine;

        try
        {
            //Creates a FileReader object with the path of where the file the user wants to read.
            fileReader = new FileReader("SaveFile" + 1 +".txt");
            //Creates a BufferedReader object and provides it with the FileReader.
            bufferedReader = new BufferedReader(fileReader);

            //trys to read the first line in the file then saves it to the nextLine field.
            nextLine = bufferedReader.readLine();
            //sets first line to player.
            player = Integer.parseInt(nextLine);
            nextLine = bufferedReader.readLine();
            //sets second line to the opposite peice.
            opposite = Integer.parseInt(nextLine);

            //while the nextLine field isnt empty.
            //reads each line and sets it to the board.
            for(int i = 0; i<board.length; i++){
                for(int j = 0; j<board[i].length; j++){
                    nextLine = bufferedReader.readLine();
                    board[i][j] = Integer.parseInt(nextLine);
                }
            }
            //continues game.
            updateBoard();
        }
        //If theres a error
        catch(IOException e)
        {
            //Tell the user a error has occured.
            System.out.println("Sorry there has been an error in opening or reading the file.");
        }
        finally
        {
            // if the bufferReader is empty.
            if(bufferedReader != null)
            {
                //try closing the file.
                try 
                {
                    bufferedReader.close();
                }
                //if theres a error
                catch(IOException e)
                {
                    //Tell the user an error occured.
                    System.out.println("An error occurred when closing this file");
                }
            }
        }
    }

    /**
     * This method is called from the Menu event: Save Game.
     * ReversiGUI
     */
    public void SaveGame()
    {
        //declares variables which will be used.
        FileOutputStream outputStream = null;
        PrintWriter printWriter = null;
        boolean continueWriting = true;
        int number;
        try
        {
            // creates a FileOutputStream object with a path.
            // to the file the user wants to use.
            outputStream = new FileOutputStream("SaveFile" + 1 +".txt");

            // creates a printWriter object and provides it with the FileOutPutStream.
            printWriter = new PrintWriter(outputStream);

            printWriter.println(player);
            printWriter.println(opposite);
            for(int i = 0; i<board.length; i++){
                for(int j = 0; j<board[i].length; j++){
                    printWriter.println(board[i][j]);
                }
            }
        }
        //if theres a error
        catch (IOException e)
        {
            //Tell user a error occured.
            System.out.println("Sorry theres a error opening or writing to this file");
        }
        finally
        {
            //If theres nothing in the printWriter.
            if (printWriter != null)
            {
                //Close the file
                printWriter.close();
            }
        }
    }

    /**
     * This method is called from the Mouse Click event.
     * ReversiGUI
     */
    public void clickSquare(int row, int col)
    {
        //creates variables.
        boolean validMove = checkMove(row, col, 1);

        //if Move is valid changes correct counters and change player.
        if(validMove == true){
            if(player == 1){
                player = 2; 
                opposite = 1;
                updateBoard();
            }
            else if(player == 2){
                player = 1;
                opposite = 2;
                updateBoard();
            }
        }
        //displays error
        else {
            JOptionPane.showMessageDialog(null,"Sorry that wasnt a correct move");
        }
        //checks if there are any more moves to make.
        boolean noMove = checkAvailableMove();
        //if there are no moves.
        if(noMove != true){
            //change player.
            if(player == 1){
                player = 2;
                opposite = 1;
                noMove = checkAvailableMove();
                //stop the game.
                if(noMove != true ){
                    JOptionPane.showMessageDialog(null,"The Game has Ended");
                    printScore();
                    System.exit(1);
                }
            }
            else if(player == 2){
                player = 1;
                opposite = 2;
                noMove = checkAvailableMove();
                if(noMove != true){
                    JOptionPane.showMessageDialog(null,"The Game has Ended");
                    printScore();
                    System.exit(1);
                }
            }

        }
        else if(fullBoard() == true){
            JOptionPane.showMessageDialog(null,"The Game has Ended");
            printScore();
            System.exit(1);
        }

    }

    /**
     * Checks all directions to see if the users co-ordinates are able to be used.
     * 
     * Passes row, column and check as integer values into the method.
     * 
     * Returns boolean value validMove. 
     */
    public boolean checkMove(int row, int column, int check){
        //declare variables.
        boolean[] valid = new boolean[8];
        boolean validMove = false;
        
        //checks if co-ordinates are free to use.
        if(board[row][column] == 0){
            if(column<6){
                //checks right
                valid[0] = checkaAndMove(row, column,  0, 1, check);
            }
            if(column>1){
                //checks left
                valid[1] = checkaAndMove(row, column, 0, -1, check);
            }
            if(row>1){
                //check up
                valid[2] = checkaAndMove(row, column, -1, 0, check);
            }
            if(row<6){
                //checks down
                valid[3] = checkaAndMove(row, column, 1, 0, check);
            }
            if(row>1 && column<6){
                //checks up right
                valid[4] = checkaAndMove(row, column, -1, 1, check);
            }
            if(row<6 && column<6){
                //check down right
                valid[5] = checkaAndMove(row, column, 1, 1, check);
            }
            if(row>1 && column>1){
                //checks up left
                valid[6] = checkaAndMove(row, column, -1, -1, check);
            }
            if(row<6 && column>1){
                //checks down left
                valid[7] = checkaAndMove(row, column, 1, -1, check);
            }
            
            //If any of the directions are valid then there is a valid move.
            for(int i = 0; i<8; i++){
                if(valid[i] == true){
                    validMove = true;
                }
            }
        }
        return validMove;
    }

    /**
     * checks every Move for the player to see if they are able to make a move.
     * 
     * returns boolean variable available(move to make).
     */
    public boolean checkAvailableMove(){
        boolean avalaible = false;
        for(int i = 0; i<board.length; i++){
            for(int j = 0; j<board[i].length; j++){
                if(checkMove(i, j, 0) == true){
                    avalaible = true;
                    setGuiSquare(i, j, 'O');
                }
            }

        }
        return avalaible;
    }

    /**
     * Checks if the board is full.
     * 
     * Returns boolean variable if the board is full.
     */
    public boolean fullBoard(){
        boolean full = true;
        for(int i = 0; i<board.length; i++){
            for(int j = 0; j<board[i].length; j++){
                if(board[i][j] == 0 ){
                    full = false;
                }
            }
        }
        return full;
    }

    /**
     * Prints the scores of both users.
     */
    public void printScore(){
        //sets players scores to zero.
        int player1Score = 0;
        int player2Score = 0;

        //adds all of the players counters.
        for(int i = 0; i<board.length; i++){
            for(int j = 0; j<board[i].length; j++){
                if(board[i][j] == 1){
                    player1Score++;
                }
                else if(board[i][j] == 2){
                    player2Score++;
                }
            }
        }
        //Displays scores.
        JOptionPane.showMessageDialog(null,"Player 1: " + player1Score + " Player 2: " + player2Score);

    }

    /**
     * Checks If move is valid if so and is wanted then executes move.
     * 
     * Passes integer value row, column v(change in verticle direction), h (change in horizontal direction), verify (if they would like to just verfiy the move.
     * 
     * Returns boolean value.
     */
    public boolean checkaAndMove(int row, int column, int v, int h, int verify){
        //declare variables.
        boolean valid = false;

        //if the direction choosen has an opponent.
        if(board[row + v][column+h] != opposite){
        }
        else {
            int x = row + (v*2);
            int y = column + (h*2);
            boolean emptyGrid = false;
            boolean lineFormed = false;
            int columnIndex = 0;
            int rowIndex = 0;

            //keeps checking the choosen direction to see if player forms a line.
            while(lineFormed == false && emptyGrid == false && y>=0 && y <8 && x>=0 && x<8){
                if(board[x][y] == 0){
                    emptyGrid = true;
                }
                else if(board[x][y] == player){
                    lineFormed = true;
                    columnIndex = y;
                    rowIndex = x;
                }
                else{
                    y = y + h;
                    x = x + v;
                }
            }
            //if a line has formed.
            if(lineFormed == true){
                //Put correct player counter in the line.
                if(verify == 1){
                    if(column <= columnIndex && row <= rowIndex){
                        for(int i = column, j = row; i<=columnIndex && j<=rowIndex; i= i + h, j = j + v){
                            board[j][i] = player;
                        }
                    }
                    else if(column >= columnIndex && row <= rowIndex){
                        for(int i = column, j = row; i>=columnIndex && j<=rowIndex; i= i + h, j = j + v){
                            board[j][i] = player;
                        }
                    }
                    else if(column <= columnIndex && row >= rowIndex){
                        for(int i = column, j = row; i<=columnIndex && j>=rowIndex; i= i + h, j = j + v){
                            board[j][i] = player;
                        }
                    }
                    else if(column >= columnIndex && row >= rowIndex){
                        for(int i = column, j = row; i>=columnIndex && j>=rowIndex; i= i + h, j = j + v){
                            board[j][i] = player;
                        }
                    }
                }
            }
            // make valid true.
            if(lineFormed == true){
                valid = true;
            }

        }
        return valid;
    }

    /**
     * changes the GUI display.
     */
    public void updateBoard(){
        for(int i = 0; i<board.length; i++){
            for(int j = 0; j<board[i].length; j++){
                //changes GUI board.
                if(board[i][j] == 1){
                    setGuiSquare(i, j, '1');
                }
                else if(board[i][j] == 2){
                    setGuiSquare(i, j, '2');
                }
                else{
                    setGuiSquare(i, j, ' ');
                }
            }
        }
    }

}
